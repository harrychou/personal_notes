http://git-scm.com/book
Pro Git

1. Getting Started

1.1 About Version Control

	A VCS allows you to: 
	* revert files back to a previous state, 
	* revert the entire project back to a previous state, 
	* review changes made over time, 
	* see who last modified something that might be causing a problem, 
	* who introduced an issue and when, 
	* and more. 

	Types of VCS (version control system)
	* Local http://git-scm.com/figures/18333fig0101-tn.png
		- RCS
	* Central http://git-scm.com/figures/18333fig0102-tn.png
		- CVS/Subversion/Perforce
		- Single Server contains all versions
		- Adv
			* collaboration
			* easy to admin
		- Disadv
			* single point of failure 
	* Distributed http://git-scm.com/figures/18333fig0103-tn.png
		- Git/Mercurial/Bazar/Darcs
		- Each client have full mirror of the respository
		- Each client or server can be used to restore/copy to each other
		- Enable more flexible workflow within project

1.2 A Short History of Git

	From Linux project
	* from 1991 to 2002 - just patches and archive files
	* from 2002 - use proprietary DVCS called BitKeeper
	* 2005 - BitKeeper company stop provide it free of charge
		- Linus Torvalds started developing their own tool
	* goals
		- speed
		- simple design
		- strong support for non-linear development
		  (thousand of parallel branches)
		- fully distributed
		- able to handle big project (Linux Kernel, speed and data size)

1.3 Git Basics

	Git Basic
	* Important to learn basics of how Git works
	* Git's way of thinking/handling info are very different - source of confusion

	What's different of Git from others
	* Other think in terms of files and changes to the files
		- http://git-scm.com/figures/18333fig0104-tn.png
	* Git thinks of its data more like a set of snapshots of a mini filesystem
		http://git-scm.com/figures/18333fig0105-tn.png
		- every commit is like taking a snashop
		- if one file has no change, just store pointer to previous file instead save the new file
		- Git more like a mini filesystem with some incredibly powerful tools built on top of it
		- the benefits will be covered when discussing Git branching

  Nearly Every Operation Is Local 
  * no need to have a remote server
  * you can do everything and enjoy the benefit of version control
  * fast - encouraged to check in

  Git Integrity
  * everything stored by checksum
  	- all changes are definitely tracked by Git
	* You canâ€™t lose information in transit or get file corruption without Git being able to detect it.
	* SHA-1 hash
		- 40-char string
		- calculated based on the contents of a file or directory structure of Git
		- ex: 24b9da6552252987aa493b52f8696cd6d3b00373
	* Git store everything based on the hash string (which represents content) rather than file name

	Git only add data to repository
	* everything is undoable
	* very hard to lose data in Git

	Three state the files can reside in
	* three states
		- commited: safely saved to git database
		- modified
		- staged: marked a modified file in its version to go into commited snapshot
	* three main sections http://git-scm.com/figures/18333fig0106-tn.png
		- working directory
			* single checkout of one version
			* pulled out of compressed database from Git repository
		- staging area
			* a simple file
			* store information about what will go into next commit
			* aka: index
		- git directory (repository)
			* where git store metadata
			* database
			* copied to all repositories

1.4 Installing Git

	* from source
	* on Linux
	* on Mac
	* on Windows

1.5 First-Time Git Setup

	one-time setup, but can update anytime

	git config
	* main tool to control Git
	* tool to setup variables
	* the info are stored in three places:
		(more specific place trumps the general one)
		- /etc/gitcofnig
			* git config --system
			* shared by all users
			* C:\Program Files (x86)\Git\etc\gitconfig
		- ~/.gitconfig
			* C:\Users\c00522\.gitconfig
			* only for you
			* git config --global
		- .git/config
			* only for that repository

	Things to config
	* identity
		- git config --global user.name "Harry Chou"
		- git config --global user.email "harrychou@gmail.com"
	* editor
		- git config --global core.editor emacs
	* diff
		- git config --global merge.tool vimdiff

	display configs
	* git config --list
	* git config re

1.6 Getting Help

	git help <verb>
	git <verb> --help
	man git-<verb>

1.7 Summary

2. Git Basics

	* covers all basic commands
	* configure/initialize repository
	* begin/stop tracking files
	* stage/commit changes
	* ignore files
	* file patterns
	* undo mistakes
	* browse history of the project
	* view changes between commits
	* push/pull from remote repository

2.1 Getting a Git Repository

	Two ways to get a git repository
	* add an existing directory into Git
	* clone an respository from remote

	git init
	* start tracking files in the existing directory
	* create .git folder
	* this is a skeleton
	* to start tracking
		- git add *.c
		- git add REAMME
		- git commit -m 'initial commit'

	git clone [url]
	* it's not checkout
		- checkout means getting a working copy
		- clone means getting the whole repository
		- server is just another place to store repository
	* ex: git clone git://github.com/user/repository1
	* what happens?
		- create a subdirectory repository1
		- initialize .git
		- pull down the data
		- check out a latest copy to be worked on
	* to clone into directory with another name
	  git clone [url] directoryName
	* git tranfer protocols
		- git://
		- http:// or https://
		- user@server:/path.git (SSH transfer)

2.2 Recording Changes to the Repository

	at some point of your work, you want to record your work as a version

	tracked/untracked fiels
	* tracked files: 
		- files in last snapshot or staged to go into next snapshot
		- can be in the state of: unmodifed, modified, staged
	* untracked files
		- files not in last snaphot and not staged

	check the status of the files
	* git status
	* by default should be 'nothing to commit'

	adding a new file
	* after adding a new file -> the file is untracked
	* to track it
	  git add filename
	* now the file is tracked and staged
	* to track directory (recursively)
	  git add directoryName

	git add will stage the extact file while it is staged
	* if file modified after staged, it can be both modified and staged
	* when commit without git add again, the staged content will be committed
	* you have to stage again (git add) to be able to commit the later change

	ignore files
	* some files are transient and autogenerated 
	  --> you don't really want to record their history
	* use .ignore file with glob patterns
	* rules for glob patterns: 
		- Blank lines or lines starting with # are ignored.
		- Standard glob patterns work.
		- You can end patterns with a forward slash (/) to specify a directory.
		- You can negate a pattern by starting it with an exclamation point (!).

		# a comment - this is ignored
		# no .a files
		*.a
		# but do track lib.a, even though you're ignoring .a files above
		!lib.a
		# only ignore the root TODO file, not subdir/TODO
		/TODO
		# ignore all files in the build/ directory
		build/
		# ignore doc/notes.txt, but not doc/server/arch.txt
		doc/*.txt
		# ignore all .txt files in the doc/ directory
		doc/**/*.txt

	show difference (git diff)
	* two type of diff
		- compare working directory to staged are
		  (what has been changed but not staged yet)
		- compare stage area to repository
		  (what you plan to commit to what has already been committed)
	* git diff by default do first one
	* git diff --staged do the second one

	commit changes
	* git commit
	* by default will use default editor (git config --global core.editor) to add comment
	* git commit -m 'comment'
	* git commit -am 'comment'
		- allow you to skip the (git add)
		- only add tracked files (for untracked files you still need manual git add)

	remove files
	* by only delete the file, your repository still track the file
	* use git rm to untrack the file
		- if the file is added to the index already, 
		  you must force the removal with the -f option.
		- this is to make removing content from repository difficult
	* to only remove from staged area but not working directory
	  (so the file is still in local directory, but Git won't track it)
	  git rm --cached file
	* git rm can take pattern to remove multiple files

	mvoe files
	* git mv file_from file_to
	* same as
	  mv file_from file_to
	  git rm file_from
	  git add file_to
	* Git does not store rename file in metadata, git only try to figure that out after the fact
	* that means, you can rename using another tool and (git rm) (git add) to save to repository

2.3 Viewing the Commit History

	viewing the history of Git repository
	* git log
		- show all history with checksum, author , date
		- show in reverse order
	* git log -p -2
		- last 2 commits
		- -p show all diff
		- useful for code review and stuff
	* git log -U1 --word-diff
		- U1, show diff output of only one line
		- word-diff, show word difference
		  [-  ...  -] or {+  ....  +}
    * git log --stat
    	- shows the history with summary of 
    	- # of files changes...
    * git log --pretty=oneline|short|full|fuller
    	- change the format 
    * custom format
      $ git log --pretty=format:"%h - %an, %ar : %s"
      format options:
      	%H  Commit hash
		%h  Abbreviated commit hash
		%T  Tree hash
		%t  Abbreviated tree hash
		%P  Parent hashes
		%p  Abbreviated parent hashes
		%an Author name
		%ae Author e-mail
		%ad Author date (format respects the --date= option)
		%ar Author date, relative
		%cn Committer name
		%ce Committer email
		%cd Committer date
		%cr Committer date, relative
		%s  Subject
	* author vs commiter
		- author: who wrote the patch
		- commiter: who last applied the patch
	* to view log with graphi output
    git log --pretty=format:"%h %s" --graph

	Limiting log output
	* --since=2.weeks
	* --until=2.weeks
	* --author
	* --committer
	* example:
		git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/ 
		want to see which commits modifying test files in the Git source code history 
 		were committed by Junio Hamano in the month of October 2008 and were not merges, 

	use gitk
	* shows what git log shows
	* nice graph for ancestor
	* show diff on bottom left

2.4 Undoing Things

	How to get back to history?
	* warning: may lose work (one of the few area in Git)

	To Amend a commit
	* git commit -m 'initial commit'
		git add forgotten_file
		git commit --amend
	* this will forget the first commit and use the second commit as the only commit
	* can also use to change commit message
	
	Unstage a staged file
	* if you type git add ., but realize you want to keep modify one file
	* git reset HEAD filename

	Unmodify a modified file
	* if you want to revert the file back to what you first get from repository
	* git checkout -- filename
	* this will actually get rid of whatever you've changed
	* if want to keep a record somehow, use branch or stash

2.5 Working with Remotes

	Remote Repository
	* a repository that is hosted somewhere else (internet or some other machines)
	* can have many remote repositories
	* each of them can be read-only or read-write
	* managing remote repositories
		- add remote repository
		- remove ....
		- managing remote branches and define tracked or not

	git remote
	* by default show all the defined remotes
	* -v to show more info
	* show multiple remotes, withonly one with SSH for pushing to
		- this is to allow pulling from other branches, and pushing only to one

	to add a new remote repository
	* git remote add shortname url

	to get stuff from a remote repository
	* git fetch remote-name
		- pull down all data from the remote project that does not available locally
		- we will have local reference to all branches available remotely
		- we can then merge or inspect the branches
	* if you cloned the repsitory, you have 'origin' as the remote repository
	* fetch won't modify local work directory
		--> you have to merge it manually when OK
	
	git pull
	* you can have a branch setup to track remote branch
		(this is the default behavior when you have git clone - local master is tracking 'origin' master)
		in this case, you can use git pull to :
		- pull data
		- and merge automatically
		- and checkout to workign directory
	* your local master branch is tracking remote 'orignin' master
	
	git push [remote-name] [branch-name]
	* push your work upstream
	* git push origin master 
		(push my master branch back to remote-origin)
	* need write permission
	* cannot have more than two persons push at the same time
	* if someone else alreay pushed, your push will be rejected
		- you have to pull first and merge

	inspectig remote
	* to find more information about a remote
		git remote show origin
	* sample output
		remote origin
	  Fetch URL: https://github.com/harrychou/Notes.git
	  Push  URL: https://github.com/harrychou/Notes.git
	  HEAD branch: master
	  Remote branch:
	    master tracked
	  Local branch configured for 'git pull':
	    master merges with remote master
	  Local ref configured for 'git push':
	    master pushes to master (up to date)
	* other info are shown too

	Removing and Renaming Remotes
	* git remote rename to change remote's shortname
	* will change the reference of brannch -> pb/master is now at paul/master.
	* to remove
		git remote rm shortname
		- used when stop using a mirror or drop a contributor 

2.6 Tagging

	Tagging
	* also available in other VCSs
	* mark a specific point in history as important
	* generally used for marking a release point

	List all the tags
	* git tag
	* git tag -l 'v1.4.2.*'

	Types of tags
	* lightweight
		- just like a branch that doesn't change
		- just a point of a specific commit
	* annotated (recommended for more info)
		- stored as full objects
		- checksumed with all info (email, tagname, date)
		- have detailed message
		- can be signed and verified by GNU Privacy Guard

	Annotated tags
	* to create
		git tag -a v1.4 -m 'comment'
	* to view the tag
		git show v1.4
		- tagger
		- date
		- version ...

	signed tags
	* to sing a tag
		git tag -s v1.5 -m 'my signed 1.5 tag'
	* use GPG to sign
	* git show v1.5
		- will show PGP signature
	* you can later 'verify' the tag

	lightweight tags
	* basically the commit checksum stored in a file â€” no other information is kept
	* to create
		git tag v1.4.lw
	* git show v1.4 
		will only show simple info

	verify tags
	* git tag -v [tag-name]
	* need the signerâ€™s public key in your keyring for this to work properly
	* if no signerâ€™s public key, you get gpg error

	tag a past commit
	* git tag -a v1.2 -m 'comment' 964f16d36dfccde844893cac5b347e7b3d44abbc
		- 964f16d36dfccde844893cac5b347e7b3d44abbc is the checksum of the commit
	* to get the list of commit
		git log --pretty=oneline

	by default, tags are not pushed to remote
	* to push a tag you have to use
		git push origin v1.5
	* to push mulitple tags
		git push origin --tags	

2.7 Tips and Tricks

	Tips and Tricks to make using Git easier
	* just good to know, don't have to do these
	* Bash shell auto completion
		- in Git source / contrib/completion
		- git-completion.bash
	* windows shell integration
		- part of msysGit
	* autocomplete also works for options
		$ git log --s<tab>
		--shortstat  --since=  --src-prefix=  --stat   --summary
	* git allow you to create alias for common commands
		$ git config --global alias.co checkout
		$ git config --global alias.br branch
		$ git config --global alias.ci commit
		$ git config --global alias.st status
		- instead of git commit, just type git ci
		$ git config --global alias.unstage 'reset HEAD --'
		- $ git unstage fileA
			$ git reset HEAD fileA
		$ git config --global alias.last 'log -1 HEAD'
		- $ git last 
			(get the latest commit info)
	* use git alias to run external command
		$ git config --global alias.visual '!gitk'	

2.8 Summary

	basic local Git operation
	next -> killer feature > branching


Chapter 3

Chapter 3 Git Branching

	all VCs have branching
	* branching - used when diverge from the main line
	* separate from the changes of main line
	* often difficult for most VCs

	Git's branching is the killer feature
	* Git's branching is lightweight
	* making branching very easy and instaneous
	* Git encourse branching/merging as often as you like

3.1 Git Branching - What a Branch Is

	what is branch?
	* first need to understand how Git stores its data - a series of snapshots
	* when commit in Git, Git store a 'commit object' in database
		- the commit object has a pointer to the snapshot of the staged content/author/metadata
		- also, has pointer(s) to the parent commits
		- first commit does not have parent commit
		- multiple parents if it is a result of two or more branches
	* example - three file directory
		- first stage all three files 
			* create checksums for each file (SHA-1)
			* store the files as of current to staging (Git blobs)
			* checksums are added to stage area
		- when commit
			* checksum directory and all sub-dirs
			* store all three files to repoistory
			* a commit object is created to the root project tree
		- five objects are in Git repo now
			* three blobs (one for each file)
			* one tree for the contents of the directory with the file names that point to the files' blobs
			* one commit object with pointer to the tree object and the commit data
		- example: http://git-scm.com/figures/18333fig0301-tn.png
			* commit object points to tree object, which points to 3 blobs
			* each object has checksum size and additonal properties
	* if new changes are added and committed
		- new commit object created, points to a new tree object, point to the blobs changed
			http://git-scm.com/figures/18333fig0302-tn.png
		- the new commit object also points to the previous commit object
	
	branch
	* branch is only a pointer to the commit
	* default branch name: master
		- if make any commit, master branch holds the pointer to the new commit
		- the new commit object still point to the previous commit object the 'master' previously point to
			http://git-scm.com/figures/18333fig0303-tn.png
	* create new branch
		git branch new-branch-name
		- just create a new branch object with a pointer to the same commit
	* switch branches
		- how did Git knows which branch object to point to the new commit? 
			* Git has a HEAD pointer that determine which branch is the current one
			* In Git, HEAD is just a pointer to point to the 'local' brach you are currently working on	
			http://git-scm.com/figures/18333fig0305-tn.png
		- to switch the HEAD to another branch
			git checkout branch-name
	* if you are on the new branch: 
		- if you commit a new change to the new branch
		- the new commit object will be created, with the 'branch object' points to the new commit
		- 'master' is still point to the old commit
		http://git-scm.com/figures/18333fig0307-tn.png

	what happened when you switch back to master
	git checkout master
	* Git's HEAD pointer now point back to the master branch object, which point to the old commit
	* the files in the working directory are replaced by the blobs that the old commit points to
		(wondering how the untracked/modified files will be saved/treated)
	* new commits will now go under the master branch
		http://git-scm.com/figures/18333fig0309-tn.png

	create a branch is very easy
	* only a simple file with SHA-1 checksum (40 bytes)
	* the checksum is the commit's checksum

	other VCs
	* branching takes time - copy all files to another directory
		- Git is instanteneous
	* branches do not know it's parent commit snapshot
		- Git has the information to which commit branching point starts
		- Git can use the info to merge
	* branching is a conscious and very serious effort
		- Git encourage everyone to branch
		- branching and merging is always easy and encouraged 

3.2 Basic Branching and Merging

	how branching/merging works in real work workflow
	* basic cenario
		- working on a project
		- create a new branch for each new story you work
		- do all the work on the branch (dev branch)
	* branching scenario
		- production hot fix needed
		- leave dev branch
		- revert back to production branch
		- create the hot-fix branch
		- work on hot-fix
		- after work in done, merge the work from hot-fix branch to production branch
		- push to production from production branch
		- switch back to dev branch, and keep working from there

	dev work process
	* to start working on a specific issue (#53)
		git checkout -b iss53
		- shorthand for
			git branch iss53
			git checkout iss53
		- all the commit from now on will be in iss53 branch
	* now, producton issue called, need to work on hotfix
		- all have to do is revert back to master
			git checkout master
		- if unstaged or uncommitted files have conflict with master 
			git will stop you from switch
			* stashing and commeit amending can workaround it (will cover later)
		- now, the files should look exact like previous master commit point
		- all changes will be in master branch now
	* to work on hotfix, create a branch
		git checkout -b hotfix
		- now works will be in hotfix branch
		(http://git-scm.com/figures/18333fig0313-tn.png)
	* once work/test is done, ready to merge back
		- first go back to master
			git checkout master
		- then do the merge (Git's merge is merge-in, not merge-to)
			git merge hotfix
		- this merge is a fast-forward merge
			you merge later work into the ancester node
			* which for Git is just move the master pointer to hotfit pointer's place
			(http://git-scm.com/figures/18333fig0314-tn.png)
		- now you can deploy the hotfix
	* it is possible to delete hotfix branch (since master and hotfix are point to the same node)
		git branch -d hotfix
	* now, dev can continue
		git checkout iss53
	* now time to integrate, do one of the following
		- iss53 merge-in the master changes
			git merge master
		- master need to merge in iss53
			git merge iss53
	
	merging conflicts
	* if hotfix and iss53 has changes on the same file
		- Git will report conflict
		- use git status to get which files has conflicts (not staged, unmerged)
		- Git automatically add standard diff marks to the file(s)

<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
  please contact us at support@github.com
</div>
>>>>>>> iss53:index.html

	* to fix the issue
		- you just open the file and fix it
		- then use git add to add the file(s)
	* to fix the issue with merge tool
		git mergetool
		- git will stage the files for you once saved
	* still need to test again
	* then, commit

3.3 Branch Management

	review of branching tools
	* git branch
		- shows all branches with * on HEAD
	* git branch -v
		- whows all branches with last commits (checksum and comment)
	* git branch --merged
		- show current branch and all the branches that
			have been merged into current
		- branches that has been merged are generally OK to delete with
			git branch -d
	* git branch --no-merge
		- willshow all the branches that have not been merged
		- you cannot delete these branches by 
			git branch -d
		- to force delete
			git branch -D

3.4 Branching Workflows

	* workflows that are available because of lightweight merging/branching
	* long runing branches approach
		- have a set of branches that are always available
		- merge between either one of the branches to aother branches 
		- http://git-scm.com/figures/18333fig0319-tn.png
	* topic branch approach
		- have one or more stable branches, for others create topic branches
		- topic branch:  
			* a short-lived branch that you create and use for a single particular feature or related work. 
			* rarely done with a VCS before because itâ€™s generally too expensive to create and merge branches. 
			* in Git itâ€™s common to create, work on, merge, and delete branches several times a day.
		- use topic branch to 
			- quickly create new branch
			- easily merge back and integrate the branch commits
		- from http://git-scm.com/figures/18333fig0320-tn.png 
			to http://git-scm.com/figures/18333fig0321-tn.png
	* in summary: Git's branching/merging make all kinds of strategy extremely easy and flexible

3.5 Remote Branches

	* Remote branches 
		- references to the state of branches on your remote repositories 
		- can be viewed as local branches, except that you canâ€™t move
		- theyâ€™re moved automatically whenever you do any network communication
		- remote branches act as bookmarks to remind you where the branches on your remote repositories were the last time you connected to them.
	* remote branch name
		- take the form (remote)/(branch)
		- example: clone a repository from git.ourcompany.com is the remote repository
			* Git automatically make the remote server 'origin'
			* origin/master will point to remote master branch
		- http://git-scm.com/figures/18333fig0322-tn.png
	* while local is being worked on, remote master can be updated by other people's git push
	* to sync up the work
		- git fetch origin
			to get the data from server origin
		- http://git-scm.com/figures/18333fig0324-tn.png
		- at that time, you need to merge you local master branch with the orgin/master 

3.6 Rebasing
3.7 Summary

4. Git on the Server
4.1 The Protocols
4.2 Getting Git on a Server
4.3 Generating Your SSH Public Key
4.4 Setting Up the Server
4.5 Public Access
4.6 GitWeb
4.7 Gitosis
4.8 Gitolite
4.9 Git Daemon
4.10 Hosted Git
4.11 Summary

5. Distributed Git
5.1 Distributed Workflows
5.2 Contributing to a Project
5.3 Maintaining a Project
5.4 Summary

6. Git Tools
6.1 Revision Selection
6.2 Interactive Staging
6.3 Stashing
6.4 Rewriting History
6.5 Debugging with Git
6.6 Submodules
6.7 Subtree Merging
6.8 Summary


7. Customizing Git
7.1 Git Configuration
7.2 Git Attributes
7.3 Git Hooks
7.4 An Example Git-Enforced Policy
7.5 Summary

8. Git and Other Systems
8.1 Git and Subversion
8.2 Migrating to Git
8.3 Summary

9. Git Internals
9.1 Plumbing and Porcelain
9.2 Git Objects
9.3 Git References
9.4 Packfiles
9.5 The Refspec
9.6 Transfer Protocols
9.7 Maintenance and Data Recovery
9.8 Summary
